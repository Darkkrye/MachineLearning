{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Construction d'un arbre de décision\n",
    "\n",
    "On souhaite coder notre propre arbre de décision. \n",
    "\n",
    "Coder les fonctions suivantes : \n",
    "- entropie (probaTab) qui renvoie la mesure d'entropie sur une répartition de classe probaTab\n",
    "- probaT(labels), qui renvoie le tableau qui consigne les probabilités pour chaque label, à partir du tableau des labels\n",
    "- dataEntropie(labeled_data), qui renvoie l'entropie des données\n",
    "- partition_par_attribut(data,attribut) qui renvoie un dict qui, pour chaque valeur possibles de attribut(clé), consigne le tableaux 2 d (exemples+ labels) issus de la partition de data (value)\n",
    "- entropie_partition(data,attribut)\n",
    "\n",
    "Vous pourrez tester votre code sur un dataset aux attributs booléens ou catégoriels. \n",
    "Par exemple, http://archive.ics.uci.edu/ml/datasets/zoo (en enlevant les attributs numériques)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def entropie (probaTab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def probaT(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def dataEntropie(labeled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def partition_par_attribut(data,attribut)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def entropie_partition(data,attribut)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Testez vos fonctions en construisant \"à la main\" le premier niveau d'un arbre de décision (sur les données du zoo par exemple)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant, les fonctions de construction de l'arbre '\n",
    "\n",
    "une fonction classify(tree, newExemple) qui renvoie la classe de l'élément newExemple\n",
    "\n",
    "une fonctin build_Tree(data, split_attribut=None) qui construit récursivement l'arbre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def build_Tree(data, split_attribut=None)\n",
    "#def classify(tree, newExemple)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
